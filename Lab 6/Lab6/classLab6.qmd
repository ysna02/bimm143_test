---
title: "Class 6: R functions"
author: "Youn Soo Na (PID:A1704731)"
format: pdf
---

## Exploring R Functions

Starting simple and write our first function to add some numbers

Every function in R has at least 3 things

- a **name**, we pick this
- one or more input **arguments**
- the **body**, where the work gets done.

```{r}
add <- function(x,y=1,z=0){
  x + y + z
}
```

Now let's try it out

```{r}
add(x=c(10,1,1,10), y=1)
```
```{r}

```

## Q1

> Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adequately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput”

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Begin by calculating the average for student1

```{r}
student1
mean(student1)
```

Try on student 2

```{r}
student2
mean(student2, na.rm=T)
```

and student3

```{r}
student3
mean(student3, na.rm=T)
```

This is not fair for student1 and student2. I need to try something else and come back to this issue of missing values (NA)

We also want to drop the lowest score from a given students' set of scores.

```{r}
student1[-8]
```

But not every student's lowest score will be the eighth score

We can try the `min()` function to find the lowest score
```{r}
min(student1)
```

Not exactly what we want. Let's use HELP to see if it gives us what we exactly want.

From HELP, we find `which.min()`, let's try it out!

```{r}
student1
which.min(student1)
```

Let's combine `which.min()` with `student1[]` and finally `mean()`!

```{r}
student1[-8]
student1[-(which.min(student1))]
min.ind <- which.min(student1)
mean(student1[-min.ind])
```

Now, let's figure out how to do the same thing with student2, which includes an NA value.

Utilise the `is.na()` function.



```{r}
student2
student2[is.na(student2)] <- 0
student2[-which.min(student2)]

```

So far,

`x[is.na(x)] <- 0` will find NAs in the vector x and make them 0 (numerical)

`mean( x[-which.min(x)])` will find and remove the lowest score before calculating the average score from student x. 

Set all students to x so that x can be used to calculate the average score for *any* student. 

Now take it all and turn it into a function

```{r}
grade <- function(x) {
  x[is.na(x)] <- 0
  mean(x[-which.min(x)])
}
```
Now, test it out
```{r}
grade(student1)
grade(student2)
grade(student3)
```


In order to easily and efficiently grade all the students at once,

use the function `apply(X, margin, fun)`

X is the input

Margin is the row and column (1 indicates rows, 2 indicates columns, c(1,2) indicates rows and columns)

Fun is the function to be applied

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
# row.names sets the name of the rows to be column 1
head(gradebook)
```

To use `apply()` to the gradebook, I need to decide whether I want to "apply" the `grade()` function over the rows (1) or columns (2) of the gradebook dataset. 

```{r}
ans <- apply(gradebook, 1, grade)
ans
```

## Q2
> Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]

```{r}
# Find which student scored the highest. 
which.max(ans)
```

## Q3
> From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall? [2pts]

```{r}
masked_gradebook <- gradebook
masked_gradebook[ is.na(masked_gradebook)] <- 0
masked_gradebook_ans <- apply(masked_gradebook, 2, mean)
which.min(masked_gradebook_ans)
```

I could modify the `grade()` fucntion to do this too - i.e. not drop the lowest options

```{r}
# By using the drop.low=T and if(drop.low), I can 
grade2 <- function(x, drop.low=T) {
  x[is.na(x)] <- 0
  
  if(drop.low) {
    cat("yes low")
    out <- mean(x[-which.min(x)])
    
  } else {
    out <- mean(x)
    cat("no low")
  }
  return(out)
  
}
grade2(student1, F)
```


## Q4
> Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

The function to calculate correlations in R is called `cor()`

```{r}
x <- c(100,90,80,100)
y <- c(100,90,80,100)
z <- c(80,90,100,10)

cor(x,z)
```

0 means there is no correlation at all

1 means it is perfectly correlated

-1 means it is perfectly anti-correlated

```{r}
cor(ans, masked_gradebook$hw1)
apply(masked_gradebook, 2, cor, ans)
```



