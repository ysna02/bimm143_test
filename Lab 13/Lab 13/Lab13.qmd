---
title: "Lab 13"
author: "Youn Soo Na (PID: A17014731)"
format: gfm
---

```{r}
# library(BiocManager)
# library(DESeq2)
```

Today we will analyze some RNASeq data from Himes et al. on the effects of dexamethasone (dex), a synthetic glucocorticoid steroid on airway smooth muscle cells (ASM). 

## Data Import

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```


> Q2. How many ‘control’ cell lines do we have?

```{r}
table(metadata$dex)
```

There are 4 control cell lines.

## Toy differential expression analysis

Calculate the mean per gene count values for all "control" samples (i.e. columns in `counts`) and do the same for "treated" and then compare them. 

1. Find all "control" values/columns in `counts`

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id)
```

2. Find the mean per gene across all control columns

```{r}
control.mean <- apply(control.counts, 1, mean)
```
> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

```{r}
# library(dplyr)
# control <- metadata %>% filter(dex=="control")
# control.counts <- counts %>% select(control$id) 
# control.mean <- rowSums(control.counts)/4
# head(control.mean)
```

3. Repeat for treated

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata$dex == "treated"
treated.counts <- counts[,treated]
```

```{r}
treated.mean <- apply(treated.counts, 1, mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```


> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}

library(ggplot2)
ggplot(meancounts, aes(control.mean, treated.mean)) +
  geom_point() +
  labs(x="Control Mean", y="Treated Mean")
```


> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
# plot(meancounts, log="xy")
# or
ggplot(meancounts, aes(control.mean, treated.mean)) +
  geom_point() +
  scale_x_continuous(trans = "log2") +
  scale_y_continuous( trans = "log2" ) +
  labs(x = "Control Mean", y = "Treated Mean")
```

We most frequently use log2 transformations for this type of data.



```{r}
log2(20/10)
```

These log2 values make the interpretation of "fold-change" a little easier and a rule-of-thumb in the filled is a log2 fold-change of +2 or a -2 is where we start to pay attention. 

```{r}
log2(40/10)
```


Let's calculate the log2(fold-change) and add it to our `meancounts` data.frame.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```

```{r}
to.rm <- rowSums(meancounts[,1:2]==0) > 0
mycounts <- meancounts[!to.rm,]
```
> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?


Filtering data to remove genes with zero expression

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

`arr.ind` returns a matrix of indices that correspond to the non-zero elements (taking out the zero counts) . 
`unique()` prevents accidental repeats when counting the zero entries. 







> Q. How many genes do I have left after this zero count filtering?

```{r}
nrow(mycounts)
```

> Q. How many genes are "up" regulated upon drug treatment at a threshold of +2 log2-fold-change?
> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

1. I need to extract the log2fc values
2. I need to find those that are above +2
3. Count them. 

```{r}
sum(mycounts$log2fc > 2)
```


> Q. How many genes are "down" regulated upon drug treatment at a threshold of -2 log2-fold-change?
> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc < -2)
```

> Q10. Do you trust these results? Why or why not?

No, because the statistics side of this data is missing. 

Missing the stats. Is the difference in the mean counts significant?

Let's do this analysis the right way with statistics and use the **DESeq2** package



## DESeq2 analysis

```{r}
#| message: false
library(DESeq2)
```

The first function that we will use will setup the data in the way (format) DESeq wants it.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

The function in the package is called `DESeq()` and we can run it on our `dds` object.

```{r}
dds <- DESeq(dds)
```

I will get the results from dds with the `results()` function:

```{r}
res <- results(dds)
head(res)
```

Make a common overall results figure from this analysis. This is designed to keep our inner biologist and inner stats nerd happy because it plots fold-change vs P-value. 

padj: p-value that has been corrected over multiple trials; stricter
```{r}
# log is used to better the visualization of the p-value (more negative 
# corresponds to smaller p-value)
# - is used to flip the plot (now more positive values correspond to
# lower p-value)
plot(res$log2FoldChange, -log(res$padj))
abline(v = c(-2,2), col = "red")
abline(h = -log(0.005), col = "red")
```

Add some color to this plot
```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange > 2 | res$log2FoldChange < -2] <- "blue"
mycols[res$padj > 0.005 & res$log2FoldChange > 2] <- "red"
mycols[res$padj > 0.005 & res$log2FoldChange < -2] <- "red"




plot(res$log2FoldChange, -log(res$padj), col = mycols)
abline(v = c(-2,2), col = "black")
abline(h = -log(0.005), col = "black")

```


I want to save my results to date out to disc

```{r}
write.csv(res, file = "myresults.csv")
```


We will pick this up next day and add **annotation** (i.e. what are these genes of interest) and do pathway analysis (what biology) are they known to be involved with. 





I need to translate our gene identifiers "ENSG000..." into gene names that the rest of the world can understand. 

To do this "annotation," I will use the **AnnotationDbi** package. I can install this with `BiocManager::install()`

```{r}
#| message: false
library(AnnotationDbi)
library(org.Hs.eg.db)

columns(org.Hs.eg.db)
```
I will use the `mapIds()` function to "map" my identifiers to those from different databases. I will go between "ENSEMBL" and "SYMBOL" (and then after "GENENAME"). 

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL",
                      column = "SYMBOL")

# head(res)
```
> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called `res$entrez`, `res$uniprot`, and `res$genename`.


Add "GENENAME" 
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL",
                      column = "GENENAME")
head(res$genename)
```

And "ENTREZID"

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "ENTREZID")
# head(res$entrez)
# res
```

```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL",
                      column = "UNIPROT")
# head(res$uniprot)
```

save our annotated results object.

```{r}
write.csv(res, file = "results_annotated.csv")
```


## Pathway Analysis

Now that we have our results with added annotations we can do some pathway mapping.


Let's use the **gage** package to look for KEGG pathways in our results (genes of interest). I will also use the **pathview** package to draw little pathway figures. 

```{r}
#| message: false
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
head(kegg.sets.hs, 1)
```

What **gage** wants as inputs is not my big table/data.frame of results. It just wants a "vector of importance". For RNASeq data like we have this is our log2FC values...

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```


Now, let’s run the gage pathway analysis.

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
# What's in this keggres object?
attributes(keggres)
```



```{r}
head(keggres$less, 3)
```

Let's use the **pathview** package to look at one of these highlighted KEGG pathways with our genes highlighted. 
"hsa05310 Asthma"

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
 
 ![Asthma pathway with my DEGs](hsa05310.pathview.png)
 
 
 
 
 
 
 
 
 
 
 
 






