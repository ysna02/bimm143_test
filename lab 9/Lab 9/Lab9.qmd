---
title: "Class 9: Structual Bioinformatics Pt. 1"
author: "Youn Soo Na (PID: A17014731)"
format: gfm
---


The main database for structural data is called the PDB (Protein Data Bank). Let's see what it contains!

Data from: https://www.rcsb.org/stats
Or from alternate link: https//tinyurl.com/pdbstats24

```{r}
pdb24 <- read.csv("pdb_stats.csv", row.names=1)
head(pdb24)
```

```{r}
# Some of the "numeric" values are actually characters
# We need to change them to numeric values. 
# as.numeric( sub(",", "", pdb24$Total))
# I could run this into a function to fix the whole table or any future table 
# I read like this:
# x <- pdb24$Total
# as.numeric( sub(",", "", x) )

 comma2numeric <- function(x) {
   as.numeric( sub(",", "", x) )
 }

# Test it.
# comma2numeric(pdb24$X.ray)
# head(pdb24)

pdb24test <- apply(pdb24, 2, comma2numeric)
head(pdb24test)
```

```{r}
## try a different read/import function:
library(readr)
pdbdb <- read_csv("pdb_stats.csv")
```
```{r}
sum(pdbdb$Total)
```

And answer the following questions:

> Q1. What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy?

```{r}
(sum(pdbdb$`X-ray`)/sum(pdbdb$Total) * 100)+(sum(pdbdb$EM)/sum(pdbdb$Total) *100)
```


> Q2. What proportion of structures in the PDB are protein?

```{r}
# library(dplyr)
# pdbdb %>%
#   filter(rowSums(sapply(., function(x) grepl("protein", x, ignore.case = TRUE))) > 0)
pdbdb$Total[1]/sum(pdbdb$Total) * 100
```


> Q3. Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

4553






## Mol*

Mol* (pronounced "molstar") is a new web-based molecular viewer that we will need to learn the basics of here. 

https://molstar.org/viewer/

We will use PDB code: 1HSG


![Caption: a first image from molstar](1HSG.png)
Note: This is an aspartic protease that uses 2 aspartic acid

Here are some more custome images:

![Aspartic acid shown](1HSG-D.png)
![Molecular Surface Representation](1HSG-Molecular-Surface-Representation.png)
![The ligand fits perfectly](1HSG-LikeAGlove.png)

> Q4. Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?



> Q5. There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have?

The water molecular is labeled HOH 308

> Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.

![Water molecule is represented as a white ball](1HSG-Q.png)

> Discussion Topic: Can you think of a way in which indinavir, or even larger ligands and substrates, could enter the binding site?

> Q7: [Optional] As you have hopefully observed HIV protease is a homodimer (i.e. it is composed of two identical chains). With the aid of the graphic display can you identify secondary structure elements that are likely to only form in the dimer rather than the monomer?


## BIO3D Package

The bio3d package allows us to do all sorts of structural bioinformatics work in R. 

Let's start with how it can read these PDB files:

```{r}
library(bio3d)

pdb <- read.pdb("1hsg")
# get a quick summary
pdb
# MK1 is Merk1 ligand
```
```{r}
attributes(pdb)
```
```{r}
head(pdb$atom)
```
```{r}
pdbseq(pdb)
#What is position 25 of the protein sequence?
pdbseq(pdb)[25]
```





> Q7: How many amino acid residues are there in this pdb object?

```{r}
sum(pdb$calpha)

```

198

```{r}
length(pdbseq(pdb))
```


> Q8: Name one of the two non-protein residues?

HOH or MK1

>Q9: How many protein chains are in this structure?

2 chains
```{r}
unique(pdb$atom$chain)
```



## Predicting functional motions of a single structure

Let's do a bioinformatics prediction of functional motions - i.e. the movements that one of these molecules needs to make to do its stuff. 

```{r}
adk <- read.pdb("6s36")
adk
```
Perform a flexibility prediction
```{r}
m <- nma(adk)
plot(m)
```

Write out multi-model PDB file that we can use to make an animation of the predicted motions. 
To view a *movie* of these predicted motions we can generate a molecular trajectory using the `mktrj()` function

```{r}
mktrj(m, file="adk_m7.pdb")
```
Now, I can open this in Mol* to play the movie. 


## Comparative Analysis of Protein Structures


```{r}
library(bio3d)
```

Here we will find and analyze all ADK structures in the PDB database.

We will start with a single database accession id: "1ake_A"

```{r}
id <-  "1ake_A"
aa <- get.seq(id)
```



> Q10. Which of the packages above is found only on BioConductor and not CRAN?

MSA package

> Q11. Which of the above packages is not found on BioConductor or CRAN?

Bio3d-view

> Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket?

TRUE

> Q13. How many amino acids are in this sequence, i.e. how long is this sequence?

214

```{r}
attributes(aa)
```


```{r}
ncol(aa$ali)
```

```{r}
# b <- blast.pdb(aa)
# Would take too long to search. 
```

```{r}
# Plot a summary of search results
# hits <- plot(b)
```

```{r}
# List out some 'top hits'
# head(hits$pdb.id)
```

Pre-calculated results:

```{r}
# Only if blast search took too long
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')

```

```{r}
# Download related PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```

Next we will use the `pdbaln()` function to align and also optionally fit (i.e. superpose) the identified PDB structures.

```{r}
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
pdbs
```

## Principle Component Analysis

```{r}
#perform pca
pc.xray <- pca(pdbs)
plot(pc.xray)
```

```{r}
# Visualize first principle component
pc1 <-  mktrj(pc.xray, pc=1, file="pc_1.pdb")
```


```{r}
uniprot <- 248838887
pdb <- 195610
pdb/uniprot * 100
```














